{"version":3,"file":"static/js/248.2abf9672.chunk.js","mappings":"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","sources":["components/layouts/flex/types/FlexLayoutProps.types.ts","components/layouts/flex/flex-col.component.tsx","components/layouts/flex/flex-row.component.tsx","components/button/button.component.tsx","components/tab-box/tab-box.component.tsx","hooks/useZetaBalance.ts","features/CoinBox/NetworkedCoinBox.feature.tsx","features/SwapBox/AdvancedSwap/AdvancedSwap.feature.tsx","tools/sendBtcTransaction.ts","features/CoinBox/CoinBox.feature.tsx","features/SwapBox/types/SwapButtons.enum.ts","features/SwapBox/types/constants/SwapButtonTexts.ts","features/SwapBox/DefaultSwap/DefaultSwap.feature.tsx","features/SwapBox/SwapBox.feature.tsx","app/swap/swap.page.tsx"],"sourcesContent":["import { ComponentType } from \"../../../../shared/types\";\r\n\r\nexport enum CenterizeMode {\r\n  none,\r\n  vertical,\r\n  horizontal,\r\n  both,\r\n}\r\nexport type FlexLayoutProps = ComponentType &\r\n  Partial<{\r\n    reverse: boolean;\r\n    centerize: CenterizeMode;\r\n  }>;\r\n","import { CenterizeMode, FlexLayoutProps } from \"./types/FlexLayoutProps.types\";\r\n\r\nconst modesClassName = {\r\n  [CenterizeMode.both]: \"justify-center items-center\",\r\n  [CenterizeMode.horizontal]: \"justify-center\",\r\n  [CenterizeMode.vertical]: \"items-center\",\r\n  [CenterizeMode.none]: \"\",\r\n};\r\n\r\nexport function FlexCol(props: FlexLayoutProps) {\r\n  return (\r\n    <div\r\n      className={`flex ${props.reverse ? \"flex-col-reverse\" : \"flex-col\"} ${\r\n        modesClassName[props.centerize || CenterizeMode.none]\r\n      } ${props.className || \"\"}`}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n","import { CenterizeMode, FlexLayoutProps } from \"./types/FlexLayoutProps.types\";\r\n\r\nconst modesClassName = {\r\n  [CenterizeMode.both]: \"justify-center items-center\",\r\n  [CenterizeMode.horizontal]: \"items-center\",\r\n  [CenterizeMode.vertical]: \"justify-center\",\r\n  [CenterizeMode.none]: \"\",\r\n};\r\n\r\nexport function FlexRow(props: FlexLayoutProps) {\r\n  return (\r\n    <div\r\n      className={`flex ${props.reverse ? \"flex-row-reverse\" : \"flex-row\"} ${\r\n        modesClassName[props.centerize || CenterizeMode.none]\r\n      } ${props.className || \"\"}`}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n","import { IClickableElement } from \"../../shared/interface/IClickableElement\";\r\nimport { InteractableComponent } from \"../../shared/types/InteractableComponent.type\";\r\n\r\nexport function Button(props: InteractableComponent<IClickableElement>) {\r\n  return (\r\n    <button\r\n      disabled={props.disabled}\r\n      className={`py-2 px-5 text-white rounded-xl ${props.className || \"\"}`}\r\n      onClick={props.onClick}\r\n    >\r\n      {props.children}\r\n    </button>\r\n  );\r\n}\r\n","import { Button } from \"../button/button.component\";\r\nimport { FlexCol } from \"../layouts/flex/flex-col.component\";\r\nimport { FlexRow } from \"../layouts/flex/flex-row.component\";\r\nimport { TabBoxProps } from \"./types/TabBoxProps.type\";\r\n\r\nexport function TabBox(props: TabBoxProps) {\r\n  const emitActivate = (index: number) => () => {\r\n    if (props.onActive) props.onActive(index);\r\n  };\r\n\r\n  return (\r\n    <FlexCol className=\"w-full\">\r\n      <FlexRow className=\"justify-start border-b-white border-b\" reverse>\r\n        <FlexRow className=\"py-5 gap-x-5\">\r\n          {props.tabs?.map((item, index) => (\r\n            <Button\r\n              key={`${index}-${Date.now()}-tabBoxItemInstance`}\r\n              onClick={emitActivate(index)}\r\n              className={`border ${\r\n                props.activeTab === index\r\n                  ? \"bg-theme-blue border-white transition-all\"\r\n                  : \"bg-transparent border-transparent transition-all\"\r\n              } transition-all`}\r\n            >\r\n              {item}\r\n            </Button>\r\n          ))}\r\n        </FlexRow>\r\n      </FlexRow>\r\n      <FlexCol className={props.className || \"\"}>{props.children}</FlexCol>\r\n    </FlexCol>\r\n  );\r\n}\r\nexport default TabBox;\r\n","import { BigNumber, ethers } from \"ethers\";\r\nimport { parseUnits } from \"ethers/lib/utils\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { INetworkModel } from \"../interfaces/INetwork.model\";\r\nimport { erc20Abi } from \"../contracts/abis\";\r\n\r\nconst RPC = \"https://rpc.ankr.com/zetachain_evm_athens_testnet\";\r\n\r\nfunction getProvider() {\r\n  return new ethers.providers.JsonRpcProvider(RPC);\r\n}\r\n\r\nasync function getZetaBalance(account: string) {\r\n  return await getProvider().getBalance(account);\r\n}\r\n\r\nasync function getWZetaBalance(account: string) {\r\n  const contract = new ethers.Contract(\r\n    \"0x5F0b1a82749cb4E2278EC87F8BF6B618dC71a8bf\",\r\n    erc20Abi,\r\n    getProvider()\r\n  );\r\n  return await contract.balanceOf(account);\r\n}\r\n\r\nexport default function useZetaBalance(\r\n  account: string,\r\n  net: INetworkModel,\r\n  wrapped: boolean = true\r\n) {\r\n  const [balance, setBalance] = useState<BigNumber>(parseUnits(\"0\"));\r\n\r\n  useEffect(() => {\r\n    if (!account) return;\r\n\r\n    (wrapped ? getWZetaBalance(account) : getZetaBalance(account)).then((r) => {\r\n      setBalance(r);\r\n    });\r\n  }, [account, net, wrapped]);\r\n\r\n  return {\r\n    balance,\r\n  };\r\n}\r\n","import { CircularProgress } from \"@mui/material\";\r\nimport { useCoingeckoTokenPrice } from \"@usedapp/coingecko\";\r\nimport { formatEther, formatUnits } from \"ethers/lib/utils\";\r\nimport { useMemo } from \"react\";\r\nimport { WalletIcon } from \"../../assets/icons\";\r\nimport DropDown from \"../../components/drop-down/drop-down.component\";\r\nimport { FlexCol, FlexRow } from \"../../components/layouts\";\r\nimport { Crypto } from \"../../models/crypto\";\r\nimport { Networks } from \"../../shared/networks/netwoks\";\r\nimport { formatPrice } from \"../../tools/formatPrice\";\r\nimport { NetworkedCoinBoxProps } from \"./types/NetworkedCoinBoxProps.type\";\r\n\r\nexport function NetworkedCoinBox(props: NetworkedCoinBoxProps) {\r\n  const tokenPrice =\r\n    useCoingeckoTokenPrice(props.token?.address || \"\", \"USD\") || \"0\";\r\n  const index = useMemo(() => {\r\n    return props.tokens?.findIndex(\r\n      (item) => item.address === props.token?.address\r\n    );\r\n  }, [props.token?.address, props.tokens]);\r\n  return (\r\n    <FlexCol\r\n      className={`w-full bg-white bg-opacity-50 p-5 gap-y-5 ${\r\n        props.reverse\r\n          ? \"rounded-tl-3xl rounded-br-3xl\"\r\n          : \"rounded-tr-3xl rounded-bl-3xl\"\r\n      }`}\r\n    >\r\n      <div className=\"flex justify-between border-b border-theme-primary pb-5\">\r\n        <div>\r\n          <DropDown\r\n            id=\"token\"\r\n            disabled={props.loadingNetworks}\r\n            items={[props.networks?.at(props?.activeNetwork || 0)].map((i) => ({\r\n              icon: i?.iconUrl || \"\",\r\n              title: i?.nativeCoinSymbol || \"\",\r\n            }))}\r\n            title=\"توکن را انتخاب کنید\"\r\n            value={0}\r\n            onSelect={(e) => {\r\n              if (props.onTokenChange) {\r\n                props.onTokenChange(\r\n                  props.tokens?.at(e) || new Crypto(\"\", <></>, \"\", \"\")\r\n                );\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"flex items-center flex-row-reverse gap-x-5\">\r\n          <span className=\"text-white text-2xl\">{props.boxTitle || \"از\"}</span>\r\n          <DropDown\r\n            id=\"netwoks\"\r\n            disabled={props.loadingNetworks}\r\n            items={props.networks?.map((i) => ({\r\n              title: i.networkName,\r\n              icon: i.iconUrl,\r\n            }))}\r\n            title=\"شبکه را انتخاب کنید\"\r\n            value={props.activeNetwork}\r\n            onSelect={(e) => {\r\n              if (props.onNetworkChange) {\r\n                props.onNetworkChange(props.networks?.at(e) || Networks[e]);\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <input\r\n          type=\"number\"\r\n          placeholder=\"0.0\"\r\n          disabled={props.disabled}\r\n          value={props.amount}\r\n          onChange={(e) => {\r\n            if (props.onAmountChange)\r\n              props.onAmountChange(+e.currentTarget.value);\r\n          }}\r\n          className=\"w-full text-right outline-none bg-transparent text-theme-white text-3xl placeholder:text-white\"\r\n        />\r\n      </div>\r\n      <FlexRow className=\"justify-between items-center\">\r\n        <div className=\"flex items-center gap-x-2\">\r\n          <div>\r\n            <WalletIcon />\r\n          </div>\r\n          <span className=\"text-2xl pt-1 text-theme-primary\">\r\n            {formatPrice(formatEther(props.balance || formatUnits(\"0\")))}\r\n          </span>\r\n        </div>\r\n        <div className=\"flex items-center text-theme-primary pb-0.5\">\r\n          <span className=\"text-2xl \">${tokenPrice}</span>\r\n        </div>\r\n      </FlexRow>\r\n    </FlexCol>\r\n  );\r\n}\r\n","import { ButtonBase } from \"@mui/material\";\r\nimport { useEtherBalance, useEthers } from \"@usedapp/core\";\r\nimport { ZetaProtocolNetwork, getAddress } from \"@zetachain/protocol-contracts\";\r\nimport ZetaEthContract from \"@zetachain/protocol-contracts/abi/evm/Zeta.eth.sol/ZetaEth.json\";\r\nimport ZetaConnectorEth from \"@zetachain/protocol-contracts/abi/evm/ZetaConnector.eth.sol/ZetaConnectorEth.json\";\r\nimport ZetaConnectorZEVM from \"@zetachain/protocol-contracts/abi/zevm/ConnectorZEVM.sol/ZetaConnectorZEVM.json\";\r\nimport { BigNumber, ethers } from \"ethers\";\r\nimport { parseEther, parseUnits } from \"ethers/lib/utils\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport { ExchangeIcon } from \"../../../assets/icons\";\r\nimport { FlexCol } from \"../../../components/layouts\";\r\nimport { useGlobalState, useNetwork } from \"../../../hooks\";\r\nimport useZetaBalance from \"../../../hooks/useZetaBalance\";\r\nimport { Bitcoin } from \"../../../shared/chains/bitcoin.chain\";\r\nimport { emitAlert } from \"../../../states/alert/alert.signal\";\r\nimport { getSigner } from \"../../../tools/getSigner\";\r\nimport { sendBtcTransaction } from \"../../../tools/sendBtcTransaction\";\r\nimport { NetworkedCoinBox } from \"../../CoinBox/NetworkedCoinBox.feature\";\r\nimport { ConnectWalletButton } from \"../../ConnectWalletButton/ConnectWalletButton.feature\";\r\nimport { AdvancedSwapProps } from \"./types/AdvancedSwapProps.type\";\r\nimport { ZetaChain } from \"../../../shared/chains/zeta.chain\";\r\nimport { connectXdefi } from \"../../../states/xdefi/xdefi.signal\";\r\nimport { Buffer as buffer } from \"Buffer\";\r\nimport { asciiToHex } from \"web3-utils\";\r\n\r\nconst zetaToErc20 = async (\r\n  dest: string,\r\n  destProtocol: ZetaProtocolNetwork,\r\n  account: string,\r\n  targetAmount: string\r\n) => {\r\n  dest = `0x${dest}`;\r\n  console.log({\r\n    dest,\r\n    destProtocol,\r\n    account,\r\n    targetAmount,\r\n  });\r\n\r\n  let connectorContract: any;\r\n\r\n  const signer = getSigner(account);\r\n  if (!signer) {\r\n    throw new Error(\"Cant get signer\");\r\n  }\r\n\r\n  const destinationChainId = dest;\r\n  if (!destinationChainId) {\r\n    throw new Error(\"Invalid destination chain\");\r\n  }\r\n  const destinationAddress = account;\r\n\r\n  const fromZetaChain = true;\r\n\r\n  const connectorAddress = getAddress(\"connector\", destProtocol);\r\n  const zetaTokenAddress = getAddress(\"zetaToken\", destProtocol);\r\n  console.log(connectorAddress, zetaTokenAddress);\r\n  connectorContract = new ethers.Contract(\r\n    connectorAddress,\r\n    fromZetaChain ? ZetaConnectorZEVM.abi : ZetaConnectorEth.abi,\r\n    signer\r\n  );\r\n  const zetaTokenContract = new ethers.Contract(\r\n    zetaTokenAddress,\r\n    ZetaEthContract.abi,\r\n    signer\r\n  );\r\n  const amount = parseEther(targetAmount);\r\n\r\n  if (fromZetaChain) {\r\n    await signer.sendTransaction({\r\n      to: zetaTokenAddress,\r\n      value: amount,\r\n    });\r\n  }\r\n\r\n  await (\r\n    await zetaTokenContract.connect(signer).approve(connectorAddress, amount)\r\n  ).wait();\r\n\r\n  const tx = await connectorContract.connect(signer).send({\r\n    destinationAddress,\r\n    destinationChainId,\r\n    destinationGasLimit: 5000000,\r\n    message: ethers.utils.arrayify([]),\r\n    zetaParams: ethers.utils.arrayify([]),\r\n    zetaValueAndGas: amount,\r\n  });\r\n  console.log(`Transaction hash: ${tx.hash}`);\r\n};\r\n\r\nconst prepareParams = (types: string[], args: any) => {\r\n  const abiCoder = ethers.utils.defaultAbiCoder;\r\n  for (let i = 0; i < args.length; i++) {\r\n    if (types[i] === \"bytes32\") {\r\n      args[i] = ethers.utils.hexlify(ethers.utils.zeroPad(args[i], 32));\r\n    }\r\n  }\r\n  return abiCoder.encode(types, args);\r\n};\r\n\r\nexport const convertToHexAddress = (address: string): string => {\r\n  let addr: string;\r\n  try {\r\n    // Check if it's a valid hex address\r\n    addr = ethers.utils.getAddress(address);\r\n  } catch (e) {\r\n    // If not, try to convert it to an address from bech32\r\n    addr = (\"0x\" + buffer.from(address).toString(\"hex\")).slice(0, 42);\r\n  }\r\n  console.log(addr);\r\n  return addr;\r\n};\r\n\r\nconst prepareData = (contract: string, types: string[], args: any[]) => {\r\n  const params = prepareParams(types, args);\r\n  return `${contract}${params.slice(2)}`;\r\n};\r\n\r\nfunction hex2a(hex: string) {\r\n  var str = \"\";\r\n  for (var i = 0; i < hex.length; i += 2)\r\n    str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\r\n  return str;\r\n}\r\n\r\nexport function AdvancedSwap(props: AdvancedSwapProps) {\r\n  const [switchState, setSwitchState] = useState(false);\r\n  const [amount, setAmount] = useState(0);\r\n  const { account: xdefiAccount } = useGlobalState(\"xdefi\");\r\n  const {\r\n    networkList,\r\n    changeNetwork,\r\n    networkIndex: network,\r\n    loading: loadingNetworks,\r\n  } = useNetwork();\r\n\r\n  useEffect(() => {\r\n    if (!xdefiAccount) return;\r\n    emitAlert({\r\n      message: `کیف پول بیتکوین شما وصل شد ${xdefiAccount}`,\r\n      mode: \"info\",\r\n      timeout: -1,\r\n    });\r\n  }, [xdefiAccount]);\r\n\r\n  const { account } = useEthers();\r\n  const { balance: zetaBalance } = useZetaBalance(\r\n    account || \"\",\r\n    networkList[network]\r\n  );\r\n\r\n  const { balance: azetaBalance } = useZetaBalance(\r\n    account || \"\",\r\n    networkList[network],\r\n    false\r\n  );\r\n\r\n  const netBalance =\r\n    useEtherBalance(account, {\r\n      chainId: networkList[network].chainId,\r\n    }) || parseUnits(\"0\");\r\n\r\n  const insufficientValue = useMemo(() => {\r\n    if (networkList[network].chainId === Bitcoin.chainId) {\r\n      return amount === 0;\r\n    }\r\n    return (\r\n      amount === 0 ||\r\n      parseUnits(amount.toString()).gt(\r\n        networkList[network].chainId === 7001 ? azetaBalance : netBalance\r\n      )\r\n    );\r\n  }, [amount, azetaBalance, netBalance, network, networkList]);\r\n  const filteredNetworks = useMemo(\r\n    () =>\r\n      networkList.filter(\r\n        (item) => item.chainId !== networkList[network].chainId\r\n      ),\r\n    [network, networkList]\r\n  );\r\n\r\n  const [activeNet, setActiveNet] = useState(0);\r\n\r\n  const otherNetBalance =\r\n    useEtherBalance(account, {\r\n      chainId: filteredNetworks[activeNet].chainId,\r\n    }) || parseUnits(\"0\");\r\n\r\n  const onCrossChain = async () => {\r\n    console.log(\"Requesting...\");\r\n    console.log(filteredNetworks[activeNet].chainId.toString());\r\n    const toNetwork = filteredNetworks[activeNet];\r\n    const fromNetwork = networkList[network];\r\n\r\n    if (fromNetwork.chainId === ZetaChain.chainId) {\r\n      return await zetaToErc20(\r\n        toNetwork.chainId.toString(),\r\n        toNetwork.zetaChainID as any,\r\n        account || \"\",\r\n        amount.toString()\r\n      );\r\n    }\r\n\r\n    let targetZRC20 = toNetwork.chainId.toString();\r\n\r\n    const to =\r\n      fromNetwork.chainId === Bitcoin.chainId\r\n        ? \"tb1qy9pqmk2pd9sv63g27jt8r657wy0d9ueeh0nqur\"\r\n        : getAddress(\"tss\", fromNetwork.zetaChainID as any);\r\n\r\n    console.log(\"to\", to);\r\n    const value = parseEther(amount.toString());\r\n    const minAmountOut = BigNumber.from(\"0\");\r\n\r\n    console.log([targetZRC20, account, minAmountOut]);\r\n\r\n    const data = prepareData(\r\n      \"0xEE5Fbfdd9D30d7149fC27EC42B81b51513D4c314\",\r\n      [\"uint32\", \"bytes32\", \"uint256\"],\r\n      [\r\n        targetZRC20,\r\n        toNetwork.chainId === Bitcoin.chainId\r\n          ? convertToHexAddress(xdefiAccount)\r\n          : account,\r\n        minAmountOut,\r\n      ]\r\n    );\r\n\r\n    if (fromNetwork.chainId === Bitcoin.chainId) {\r\n      const hexWallet = (account || \"\").slice(2);\r\n      // const hex = btc.address.fromBech32(xdefiAccount)\r\n      // const hex = converter('eth').toHex(xdefiAccount);\r\n      // console.log((hex));\r\n      //${asciiToHex(xdefiAccount).slice(2)}\r\n      const zrc20 = getAddress(\"zrc20\", toNetwork.zetaChainID as any);\r\n      await sendBtcTransaction(\r\n        100,\r\n        xdefiAccount,\r\n        \"tb1qy9pqmk2pd9sv63g27jt8r657wy0d9ueeh0nqur\",\r\n        parseUnits(amount.toString(), \"8\"),\r\n        `hex::EE5Fbfdd9D30d7149fC27EC42B81b51513D4c314${zrc20.slice(\r\n          2\r\n        )}${account?.slice(2)}`\r\n      );\r\n      return;\r\n    }\r\n\r\n    const tx = await getSigner(account || \"\")?.sendTransaction({\r\n      data,\r\n      to,\r\n      value,\r\n    });\r\n\r\n    const r = await tx?.wait();\r\n    console.log(r);\r\n  };\r\n\r\n  const onSwitch = async () => {\r\n    try {\r\n      const fromNetwork = networkList[network];\r\n      const toNetwork = filteredNetworks[activeNet];\r\n      await changeNetwork(toNetwork);\r\n      setSwitchState(!switchState);\r\n      const fromNetworkIndex = networkList\r\n        .filter((item) => item.chainId !== toNetwork.chainId)\r\n        .findIndex((i) => i.chainId === fromNetwork.chainId);\r\n\r\n      console.log(networkList, fromNetworkIndex);\r\n\r\n      if (toNetwork.chainId === Bitcoin.chainId) {\r\n        const btcIndex = networkList.findIndex(\r\n          (item) => item.chainId === Bitcoin.chainId\r\n        );\r\n        setActiveNet(btcIndex);\r\n        return;\r\n      }\r\n      setActiveNet(Math.max(fromNetworkIndex, 0));\r\n    } catch (e) {\r\n      console.log(e);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FlexCol>\r\n      <div className=\"flex flex-col gap-y-4 relative\">\r\n        <NetworkedCoinBox\r\n          networks={networkList}\r\n          balance={\r\n            networkList[network].chainId === 7001 ? azetaBalance : netBalance\r\n          }\r\n          loadingNetworks={loadingNetworks}\r\n          activeNetwork={Math.max(network, 0)}\r\n          onNetworkChange={(newNet) => changeNetwork(newNet)}\r\n          onAmountChange={(e) => {\r\n            setAmount(e);\r\n          }}\r\n        />\r\n        <div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\">\r\n          <ButtonBase\r\n            sx={{\r\n              borderRadius: \"50%\",\r\n              transition: \"0.25s ease\",\r\n              rotate: switchState ? `180deg` : \"0deg\",\r\n            }}\r\n            onClick={onSwitch}\r\n          >\r\n            <div className=\"bg-theme-primary p-2.5 rounded-full border border-white w-12 h-12 flex justify-center items-center\">\r\n              <ExchangeIcon />\r\n            </div>\r\n          </ButtonBase>\r\n        </div>\r\n        <NetworkedCoinBox\r\n          reverse\r\n          disabled\r\n          balance={\r\n            filteredNetworks[activeNet].chainId === 7001\r\n              ? zetaBalance\r\n              : otherNetBalance\r\n          }\r\n          // balance={otherNetBalance}\r\n          boxTitle=\"به\"\r\n          activeNetwork={activeNet}\r\n          networks={filteredNetworks}\r\n          loadingNetworks={loadingNetworks}\r\n          onNetworkChange={(i) => {\r\n            connectXdefi(0);\r\n            setActiveNet(\r\n              filteredNetworks.findIndex((x) => x.chainId === i.chainId)\r\n            );\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"py-2 flex justify-center items-center\">\r\n        {!props.account ? (\r\n          <ConnectWalletButton className=\"bg-white w-full py-2.5 text-xl rounded-lg font-bold text-theme-primary\" />\r\n        ) : (\r\n          <button\r\n            disabled={insufficientValue}\r\n            onClick={onCrossChain}\r\n            dir=\"rtl\"\r\n            className=\"bg-white w-full py-2.5 text-xl\r\n             rounded-lg disabled:bg-opacity-60 transition-all disabled:cursor-not-allowed font-bold text-theme-primary outline-none\"\r\n          >\r\n            <AnimatePresence mode=\"wait\" initial={true}>\r\n              {insufficientValue ? (\r\n                <motion.span\r\n                  key={\"insufficientValue\"}\r\n                  initial={{\r\n                    x: 10,\r\n                    opacity: 0,\r\n                  }}\r\n                  animate={{\r\n                    x: 0,\r\n                    opacity: 1,\r\n                  }}\r\n                  exit={{\r\n                    x: -10,\r\n                    opacity: 0,\r\n                  }}\r\n                >\r\n                  {amount === 0\r\n                    ? \"مقدار را وارد کنید\"\r\n                    : \"مقدار وارد شده بیشتر از مقدار موجود است\"}\r\n                </motion.span>\r\n              ) : (\r\n                <motion.span\r\n                  key={\"exchange\"}\r\n                  initial={{\r\n                    x: 10,\r\n                    opacity: 0,\r\n                  }}\r\n                  animate={{\r\n                    x: 0,\r\n                    opacity: 1,\r\n                  }}\r\n                  exit={{\r\n                    x: -10,\r\n                    opacity: 0,\r\n                  }}\r\n                >\r\n                  تبدیل\r\n                </motion.span>\r\n              )}\r\n            </AnimatePresence>\r\n          </button>\r\n        )}\r\n      </div>\r\n    </FlexCol>\r\n  );\r\n}\r\n","import { BigNumber } from \"ethers\";\r\n\r\nexport function sendBtcTransaction(\r\n  feeRate: number,\r\n  from: string,\r\n  recipient: string,\r\n  amount: BigNumber,\r\n  memo: string\r\n) {\r\n  console.log({\r\n    feeRate,\r\n    from,\r\n    recipient,\r\n    amount,\r\n    memo,\r\n  });\r\n  return new Promise((resolve, reject) => {\r\n    (window as any).xfi.bitcoin.request(\r\n      {\r\n        method: \"transfer\",\r\n        params: [\r\n          {\r\n            feeRate,\r\n            from,\r\n            recipient,\r\n            amount: { amount: amount, decimals: 8 },\r\n            memo,\r\n          },\r\n        ],\r\n      },\r\n      (error: any, result: any) => {\r\n        console.log(error, result);\r\n        if (error) {\r\n          reject(error);\r\n          return;\r\n        }\r\n        resolve(result);\r\n      }\r\n    );\r\n  });\r\n}\r\n","import { CircularProgress } from \"@mui/material\";\r\nimport { useCoingeckoTokenPrice } from \"@usedapp/coingecko\";\r\nimport { formatEther, formatUnits } from \"ethers/lib/utils\";\r\nimport { useMemo } from \"react\";\r\nimport { WalletIcon } from \"../../assets/icons\";\r\nimport DropDown from \"../../components/drop-down/drop-down.component\";\r\nimport { FlexCol, FlexRow } from \"../../components/layouts\";\r\nimport { Crypto } from \"../../models/crypto\";\r\nimport { formatPrice } from \"../../tools/formatPrice\";\r\nimport { CoinBoxProps } from \"./types/CoinBoxProps.type\";\r\n\r\nexport function CoinBox(props: CoinBoxProps) {\r\n  const tokenPrice =\r\n    useCoingeckoTokenPrice(props.token?.address || \"\", \"USD\") || \"0\";\r\n  const index = useMemo(() => {\r\n    return props.tokens?.findIndex(\r\n      (item) => item.address === props.token?.address\r\n    );\r\n  }, [props.token?.address, props.tokens]);\r\n  return (\r\n    <FlexCol\r\n      className={`w-full bg-white bg-opacity-50 p-5 gap-y-5 ${\r\n        props.reverse\r\n          ? \"rounded-tl-3xl rounded-br-3xl\"\r\n          : \"rounded-tr-3xl rounded-bl-3xl\"\r\n      }`}\r\n    >\r\n      <div className=\"grid grid-cols-10\">\r\n        <div className=\"col-span-3\">\r\n          {props.loadingTokens ? (\r\n            <CircularProgress />\r\n          ) : (\r\n            <DropDown\r\n              id=\"token\"\r\n              items={props.tokens?.map((i) => ({\r\n                title: i.symbol,\r\n                icon: `/coins/${i.symbol}.webp`,\r\n              }))}\r\n              title=\"توکن را انتخاب کنید\"\r\n              value={index}\r\n              onSelect={(e) => {\r\n                if (props.onTokenChange) {\r\n                  props.onTokenChange(\r\n                    props.tokens?.at(e) || new Crypto(\"\", <></>, \"\", \"\")\r\n                  );\r\n                }\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n        <input\r\n          type=\"number\"\r\n          placeholder=\"0.0\"\r\n          disabled={props.disabled}\r\n          value={props.amount}\r\n          onChange={(e) => {\r\n            if (props.onAmountChange)\r\n              props.onAmountChange(+e.currentTarget.value);\r\n          }}\r\n          className=\"w-full col-span-7 text-right outline-none bg-transparent text-theme-white text-3xl placeholder:text-white\"\r\n        />\r\n      </div>\r\n      <FlexRow className=\"justify-between items-center\">\r\n        <div className=\"flex items-center gap-x-2\">\r\n          <div>\r\n            <WalletIcon />\r\n          </div>\r\n          <span className=\"text-2xl pt-1 text-theme-primary\">\r\n            {!props.token ? (\r\n              <></>\r\n            ) : !props.balance ? (\r\n              <CircularProgress />\r\n            ) : (\r\n              formatPrice(formatEther(props.balance || formatUnits(\"0\")))\r\n            )}\r\n          </span>\r\n        </div>\r\n        <div className=\"flex items-center text-theme-primary pb-0.5\">\r\n          <span className=\"text-2xl \">${tokenPrice}</span>\r\n        </div>\r\n      </FlexRow>\r\n    </FlexCol>\r\n  );\r\n}\r\n","export enum SwapButtonState {\r\n  none,\r\n  // approveNeeded,\r\n  approve,\r\n  approving,\r\n  swap,\r\n  swapping,\r\n  insufficientValue,\r\n}\r\n","import { SwapButtonState } from \"../SwapButtons.enum\";\r\n\r\nexport const swapButtonTexts: Record<SwapButtonState, string> = {\r\n  [SwapButtonState.none]: \"\",\r\n  [SwapButtonState.approve]: \"تایید\",\r\n  [SwapButtonState.approving]: \"درحال تایید...\",\r\n  [SwapButtonState.swap]: \"تبدیل\",\r\n  [SwapButtonState.swapping]: \"درحال تبدیل...\",\r\n  [SwapButtonState.insufficientValue]:\r\n    \"مقدار وارد شده بیشتر از مقدار موجود است\",\r\n};\r\n","import { ButtonBase } from \"@mui/material\";\r\nimport {\r\n  useContractFunction,\r\n  useEtherBalance,\r\n  useEthers,\r\n  useTokenBalance,\r\n} from \"@usedapp/core\";\r\nimport { ethers } from \"ethers\";\r\nimport { parseEther, parseUnits } from \"ethers/lib/utils\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport { useMemo, useRef, useState } from \"react\";\r\nimport { from } from \"rxjs\";\r\nimport { ExchangeIcon } from \"../../../assets/icons\";\r\nimport { FlexCol } from \"../../../components/layouts\";\r\nimport { routerAbi } from \"../../../contracts/abis\";\r\nimport { useAmountOut, useApproval } from \"../../../hooks\";\r\nimport { useTokens } from \"../../../hooks/useTokens\";\r\nimport { ICryptoModel } from \"../../../interfaces/ICrypto.model\";\r\nimport { ROUTER_ADDR } from \"../../../shared/config/dapp.confing\";\r\nimport { emitAlert } from \"../../../states/alert/alert.signal\";\r\nimport { getSigner } from \"../../../tools/getSigner\";\r\nimport { CoinBox } from \"../../CoinBox/CoinBox.feature\";\r\nimport { ConnectWalletButton } from \"../../ConnectWalletButton/ConnectWalletButton.feature\";\r\nimport { SwapButtonState } from \"../types/SwapButtons.enum\";\r\nimport { swapButtonTexts } from \"../types/constants/SwapButtonTexts\";\r\nimport { DefaultSwapProps } from \"./types/DefaultSwapProps.type\";\r\n\r\nexport function DefaultSwap(props: DefaultSwapProps) {\r\n  const [switchState, setSwitchState] = useState(false);\r\n  const temp = useRef<any>();\r\n\r\n  const [approving, setApproving] = useState<boolean>(false);\r\n  const [swapping, setSwapping] = useState(false);\r\n\r\n  const { account } = useEthers();\r\n  const { loading, tokens } = useTokens();\r\n\r\n  const [tokenA, setTokenA] = useState<ICryptoModel | undefined>();\r\n  const tokenABalance = useTokenBalance(tokenA?.address, account);\r\n  const [tokenAAmount, setTokenAAmount] = useState(\"0\");\r\n\r\n  const [tokenB, setTokenB] = useState<ICryptoModel | undefined>();\r\n  const tokenBBalance = useTokenBalance(tokenB?.address, account);\r\n  const tokeBAmount = useAmountOut(+tokenAAmount, tokenA, tokenB);\r\n\r\n  const etherBalance = useEtherBalance(account);\r\n\r\n  const { loading: availableTokenBLoading, tokens: availableTokenB } =\r\n    useTokens(tokenA?.address);\r\n\r\n  const { approve, isApproved } = useApproval(tokenA, tokenAAmount.toString());\r\n  const swapContract = useContractFunction(\r\n    new ethers.Contract(ROUTER_ADDR, routerAbi, getSigner(account || \"\")),\r\n    \"swapExactTokensForTokens\",\r\n    {\r\n      transactionName: \"swapExactTokensForTokens\",\r\n      gasLimitBufferPercentage: 10,\r\n    }\r\n  );\r\n\r\n  const insufficientValue = useMemo(() => {\r\n    if (!tokenABalance) return false;\r\n    if (tokenAAmount === \"0\") return false;\r\n    return parseUnits(tokenAAmount).gt(tokenABalance);\r\n  }, [tokenAAmount, tokenABalance]);\r\n\r\n  const approveToken = () => {\r\n    setApproving(true);\r\n    from(approve()).subscribe({\r\n      complete: () => setApproving(false),\r\n    });\r\n  };\r\n  const swap = async () => {\r\n    setSwapping(true);\r\n    from(\r\n      swapContract.send(\r\n        parseEther(tokenAAmount?.toString() || \"0.0\"),\r\n        parseEther(\"0\"),\r\n        [tokenA?.address, tokenB?.address],\r\n        account,\r\n        Math.floor(Date.now() / 1000) + 60 * 20,\r\n        {\r\n          gasLimit: 6000000,\r\n        }\r\n      )\r\n    ).subscribe({\r\n      next: (v) => {\r\n        if (!v)\r\n          emitAlert({\r\n            message: (\r\n              <>\r\n                {\" \"}\r\n                درخواست تبدیل با خطا مواجه شد{\" \"}\r\n                {/* <a href=\"https://goerli.etherscan.io/tx/\">برای اطلاعات بیشتر اینجو کلیک کن</a> */}\r\n              </>\r\n            ),\r\n            mode: \"error\",\r\n          });\r\n        else\r\n          emitAlert({\r\n            message: (\r\n              <>\r\n                {\" \"}\r\n                تبدیل با موفقیت انجام شد{\" \"}\r\n                <a\r\n                  href={\"https://goerli.etherscan.io/tx/\" + v.transactionHash}\r\n                  target=\"_blank\"\r\n                  className=\"text-blue-500\"\r\n                  rel=\"noreferrer\"\r\n                >\r\n                  برای اطلاعات بیشتر اینجو کلیک کن\r\n                </a>{\" \"}\r\n              </>\r\n            ),\r\n            mode: \"success\",\r\n          });\r\n\r\n        console.log(v);\r\n      },\r\n      complete: () => {\r\n        setSwapping(false);\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <FlexCol>\r\n      <div className=\"flex flex-col gap-y-4 relative\">\r\n        <CoinBox\r\n          loadingTokens={loading}\r\n          tokens={tokens}\r\n          balance={tokenA?.symbol === \"ETH\" ? etherBalance : tokenABalance}\r\n          onTokenChange={(token) => setTokenA(token)}\r\n          token={tokenA}\r\n          account={account}\r\n          onAmountChange={(e) => {\r\n            setTokenAAmount(e.toString());\r\n          }}\r\n          amount={tokenAAmount}\r\n        />\r\n        <div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\">\r\n          <ButtonBase\r\n            sx={{\r\n              borderRadius: \"50%\",\r\n              transition: \"0.25s ease\",\r\n              rotate: switchState ? `180deg` : \"0deg\",\r\n            }}\r\n            onClick={() => {\r\n              setSwitchState(!switchState);\r\n              temp.current = tokenA;\r\n              setTokenA(tokenB);\r\n              setTokenB(temp.current);\r\n              setTokenAAmount(tokeBAmount.toString());\r\n            }}\r\n          >\r\n            <div className=\"bg-theme-primary p-2.5 rounded-full border border-white w-12 h-12 flex justify-center items-center\">\r\n              <ExchangeIcon />\r\n            </div>\r\n          </ButtonBase>\r\n        </div>\r\n        <CoinBox\r\n          reverse\r\n          loadingTokens={availableTokenBLoading}\r\n          tokens={availableTokenB}\r\n          balance={tokenB?.symbol === \"ETH\" ? etherBalance : tokenBBalance}\r\n          token={tokenB}\r\n          onTokenChange={(token) => setTokenB(token)}\r\n          account={account}\r\n          amount={tokeBAmount.toString()}\r\n          disabled\r\n        />\r\n      </div>\r\n      <div className=\"py-2 flex justify-center items-center\">\r\n        {!props.account ? (\r\n          <ConnectWalletButton className=\"bg-white w-full py-2.5 text-xl rounded-lg font-bold text-theme-primary\" />\r\n        ) : (\r\n          <button\r\n            disabled={\r\n              swapping ||\r\n              approving ||\r\n              insufficientValue ||\r\n              !tokenA ||\r\n              !tokenB ||\r\n              +tokenAAmount === 0\r\n            }\r\n            onClick={isApproved ? swap : approveToken}\r\n            dir=\"rtl\"\r\n            className=\"bg-white w-full py-2.5 text-xl  rounded-lg disabled:bg-opacity-60 transition-all disabled:cursor-not-allowed font-bold text-theme-primary outline-none\"\r\n          >\r\n            <AnimatePresence mode=\"wait\" initial={true}>\r\n              {!tokenA || !tokenB ? (\r\n                <>لطفا توکن های خود را انتخاب کنید</>\r\n              ) : isApproved ? (\r\n                <motion.span\r\n                  key={\"swap\"}\r\n                  initial={{\r\n                    x: 10,\r\n                    opacity: 0,\r\n                  }}\r\n                  animate={{\r\n                    x: 0,\r\n                    opacity: 1,\r\n                  }}\r\n                  exit={{\r\n                    x: -10,\r\n                    opacity: 0,\r\n                  }}\r\n                >\r\n                  {insufficientValue\r\n                    ? swapButtonTexts[SwapButtonState.insufficientValue]\r\n                    : +tokenAAmount === 0\r\n                    ? \"مقدار را وارد کنید\"\r\n                    : swapButtonTexts[\r\n                        swapping\r\n                          ? SwapButtonState.swapping\r\n                          : SwapButtonState.swap\r\n                      ]}\r\n                </motion.span>\r\n              ) : (\r\n                <motion.span\r\n                  key={\"approve\"}\r\n                  initial={{\r\n                    x: 10,\r\n                    opacity: 0,\r\n                  }}\r\n                  animate={{\r\n                    x: 0,\r\n                    opacity: 1,\r\n                  }}\r\n                  exit={{\r\n                    x: -10,\r\n                    opacity: 0,\r\n                  }}\r\n                >\r\n                  {insufficientValue\r\n                    ? swapButtonTexts[SwapButtonState.insufficientValue]\r\n                    : +tokenAAmount === 0\r\n                    ? \"مقدار را وارد کنید\"\r\n                    : swapButtonTexts[\r\n                        approving\r\n                          ? SwapButtonState.approving\r\n                          : SwapButtonState.approve\r\n                      ]}\r\n                </motion.span>\r\n              )}\r\n            </AnimatePresence>\r\n          </button>\r\n        )}\r\n      </div>\r\n    </FlexCol>\r\n  );\r\n}\r\n","import { useEthers } from \"@usedapp/core\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { FlexCol, FlexRow } from \"../../components/layouts\";\r\nimport { CenterizeMode } from \"../../components/layouts/flex/types/FlexLayoutProps.types\";\r\nimport TabBox from \"../../components/tab-box/tab-box.component\";\r\nimport { useNetwork } from \"../../hooks\";\r\nimport { AdvancedSwap } from \"./AdvancedSwap/AdvancedSwap.feature\";\r\nimport { DefaultSwap } from \"./DefaultSwap/DefaultSwap.feature\";\r\n\r\nconst tabItems = [\"تبدیل ساده\", \"تبدیل پیشرفته\"].reverse();\r\n\r\nexport function SwapBox() {\r\n  const [activeTab, setActiveTab] = useState(1);\r\n  const { account } = useEthers();\r\n  const { changeNetwork, networkIndex, networkList, loading } = useNetwork();\r\n\r\n  const activateTab = async (tab: number) => {\r\n    if (tab === activeTab) return;\r\n    if (tab !== 1) {\r\n      setActiveTab(tab);\r\n      return;\r\n    }\r\n\r\n    if (networkIndex === 0) {\r\n      setActiveTab(tab);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await changeNetwork(networkList[0]);\r\n      setActiveTab(tab);\r\n    } catch (e) {\r\n      activateTab(tab);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (loading) {\r\n      return;\r\n    }\r\n\r\n    if (activeTab === 1 && account && networkIndex !== 0) {\r\n      changeNetwork(networkList[0])\r\n        .then(() => {})\r\n        .catch((e) => {});\r\n    }\r\n  }, [activeTab, networkIndex, loading, changeNetwork, networkList, account]);\r\n\r\n  return (\r\n    <FlexRow className=\"mx-auto w-full\" centerize={CenterizeMode.both}>\r\n      <FlexCol className=\"w-6/12 min-w-[400px] max-w-6xl\">\r\n        <TabBox\r\n          tabs={tabItems}\r\n          activeTab={activeTab}\r\n          onActive={activateTab}\r\n          className=\"p-5 transition-all\"\r\n        >\r\n          <AnimatePresence initial={true} mode=\"wait\">\r\n            {activeTab === 1 ? (\r\n              <motion.div\r\n                key=\"default\"\r\n                initial={{ x: 20, opacity: 0 }}\r\n                animate={{ x: 0, opacity: 1 }}\r\n                exit={{ x: -20, opacity: 0 }}\r\n              >\r\n                <DefaultSwap account={account} />\r\n              </motion.div>\r\n            ) : (\r\n              <motion.div\r\n                key=\"advanced\"\r\n                initial={{ x: 20, opacity: 0 }}\r\n                animate={{ x: 0, opacity: 1 }}\r\n                exit={{ x: -20, opacity: 0 }}\r\n              >\r\n                <AdvancedSwap account={account} />\r\n              </motion.div>\r\n            )}\r\n          </AnimatePresence>\r\n        </TabBox>\r\n      </FlexCol>\r\n    </FlexRow>\r\n  );\r\n}\r\n","import { FlexCol } from \"../../components/layouts/flex/flex-col.component\";\r\nimport { CenterizeMode } from \"../../components/layouts/flex/types/FlexLayoutProps.types\";\r\nimport { SwapBox } from \"../../features/SwapBox\";\r\n\r\nexport function SwapPage() {\r\n  return (\r\n    <FlexCol centerize={CenterizeMode.both} className=\"w-full h-[30vw] \">\r\n      <SwapBox />\r\n    </FlexCol>\r\n  );\r\n}\r\n"],"names":["CenterizeMode","modesClassName","both","horizontal","vertical","none","FlexCol","props","_jsx","className","reverse","centerize","children","FlexRow","Button","disabled","onClick","_props$tabs","emitActivate","index","onActive","_jsxs","tabs","map","item","activeTab","Date","now","RPC","getProvider","ethers","useZetaBalance","account","net","wrapped","arguments","length","undefined","balance","setBalance","useState","parseUnits","useEffect","async","contract","erc20Abi","balanceOf","getWZetaBalance","getBalance","getZetaBalance","then","r","NetworkedCoinBox","_props$token","_props$token3","_props$networks","_props$networks2","tokenPrice","useCoingeckoTokenPrice","token","address","useMemo","_props$tokens","tokens","findIndex","_props$token2","DropDown","id","loadingNetworks","items","networks","at","activeNetwork","i","icon","iconUrl","title","nativeCoinSymbol","value","onSelect","e","_props$tokens2","onTokenChange","Crypto","_Fragment","boxTitle","networkName","_props$networks3","onNetworkChange","Networks","type","placeholder","amount","onChange","onAmountChange","currentTarget","WalletIcon","formatPrice","formatEther","formatUnits","zetaToErc20","dest","destProtocol","targetAmount","connectorContract","console","log","signer","getSigner","Error","destinationChainId","destinationAddress","connectorAddress","getAddress","zetaTokenAddress","ZetaConnectorZEVM","zetaTokenContract","ZetaEthContract","parseEther","sendTransaction","to","connect","approve","wait","tx","send","destinationGasLimit","message","zetaParams","zetaValueAndGas","hash","convertToHexAddress","addr","buffer","from","toString","slice","prepareData","types","args","params","prepareParams","abiCoder","encode","AdvancedSwap","switchState","setSwitchState","setAmount","xdefiAccount","useGlobalState","networkList","changeNetwork","networkIndex","network","loading","useNetwork","emitAlert","mode","timeout","useEthers","zetaBalance","azetaBalance","netBalance","useEtherBalance","chainId","insufficientValue","Bitcoin","gt","filteredNetworks","filter","activeNet","setActiveNet","otherNetBalance","Math","max","newNet","ButtonBase","sx","borderRadius","transition","rotate","fromNetwork","toNetwork","fromNetworkIndex","btcIndex","ExchangeIcon","connectXdefi","x","_getSigner","ZetaChain","zetaChainID","targetZRC20","minAmountOut","BigNumber","data","zrc20","feeRate","recipient","memo","Promise","resolve","reject","window","xfi","bitcoin","request","method","decimals","error","result","sendBtcTransaction","dir","AnimatePresence","initial","motion","span","opacity","animate","exit","ConnectWalletButton","CoinBox","loadingTokens","CircularProgress","symbol","_props$tokens3","SwapButtonState","swapButtonTexts","approving","swap","swapping","DefaultSwap","temp","useRef","setApproving","setSwapping","useTokens","tokenA","setTokenA","tokenABalance","useTokenBalance","tokenAAmount","setTokenAAmount","tokenB","setTokenB","tokenBBalance","tokeBAmount","useAmountOut","etherBalance","availableTokenBLoading","availableTokenB","isApproved","useApproval","swapContract","useContractFunction","ROUTER_ADDR","routerAbi","transactionName","gasLimitBufferPercentage","current","floor","gasLimit","subscribe","next","v","href","transactionHash","target","rel","complete","approveToken","tabItems","SwapBox","setActiveTab","activateTab","tab","catch","TabBox","div","SwapPage"],"sourceRoot":""}